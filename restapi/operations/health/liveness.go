// Code generated by go-swagger; DO NOT EDIT.

package health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// LivenessHandlerFunc turns a function with the right signature into a liveness handler
type LivenessHandlerFunc func(LivenessParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LivenessHandlerFunc) Handle(params LivenessParams) middleware.Responder {
	return fn(params)
}

// LivenessHandler interface for that can handle valid liveness params
type LivenessHandler interface {
	Handle(LivenessParams) middleware.Responder
}

// NewLiveness creates a new http.Handler for the liveness operation
func NewLiveness(ctx *middleware.Context, handler LivenessHandler) *Liveness {
	return &Liveness{Context: ctx, Handler: handler}
}

/*Liveness swagger:route GET /liveness Health liveness

Liveness liveness API

*/
type Liveness struct {
	Context *middleware.Context
	Handler LivenessHandler
}

func (o *Liveness) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewLivenessParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
