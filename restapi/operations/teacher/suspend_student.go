// Code generated by go-swagger; DO NOT EDIT.

package teacher

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SuspendStudentHandlerFunc turns a function with the right signature into a suspend student handler
type SuspendStudentHandlerFunc func(SuspendStudentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SuspendStudentHandlerFunc) Handle(params SuspendStudentParams) middleware.Responder {
	return fn(params)
}

// SuspendStudentHandler interface for that can handle valid suspend student params
type SuspendStudentHandler interface {
	Handle(SuspendStudentParams) middleware.Responder
}

// NewSuspendStudent creates a new http.Handler for the suspend student operation
func NewSuspendStudent(ctx *middleware.Context, handler SuspendStudentHandler) *SuspendStudent {
	return &SuspendStudent{Context: ctx, Handler: handler}
}

/*SuspendStudent swagger:route POST /suspend teacher suspendStudent

Suspend Student(s)

suspend_student

*/
type SuspendStudent struct {
	Context *middleware.Context
	Handler SuspendStudentHandler
}

func (o *SuspendStudent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSuspendStudentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
