// Code generated by go-swagger; DO NOT EDIT.

package student

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCommonStudentsParams creates a new GetCommonStudentsParams object
// no default values defined in spec.
func NewGetCommonStudentsParams() GetCommonStudentsParams {

	return GetCommonStudentsParams{}
}

// GetCommonStudentsParams contains all the bound params for the get common students operation
// typically these are obtained from a http.Request
//
// swagger:parameters Get_Common_Students
type GetCommonStudentsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	TeacherID []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetCommonStudentsParams() beforehand.
func (o *GetCommonStudentsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qTeacherID, qhkTeacherID, _ := qs.GetOK("teacher_id")
	if err := o.bindTeacherID(qTeacherID, qhkTeacherID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindTeacherID binds and validates array parameter TeacherID from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetCommonStudentsParams) bindTeacherID(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvTeacherID string
	if len(rawData) > 0 {
		qvTeacherID = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	teacherIDIC := swag.SplitByFormat(qvTeacherID, "")
	if len(teacherIDIC) == 0 {
		return nil
	}

	var teacherIDIR []string
	for _, teacherIDIV := range teacherIDIC {
		teacherIDI := teacherIDIV

		teacherIDIR = append(teacherIDIR, teacherIDI)
	}

	o.TeacherID = teacherIDIR

	return nil
}
