// Code generated by go-swagger; DO NOT EDIT.

package student

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateRegisterHandlerFunc turns a function with the right signature into a create register handler
type CreateRegisterHandlerFunc func(CreateRegisterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateRegisterHandlerFunc) Handle(params CreateRegisterParams) middleware.Responder {
	return fn(params)
}

// CreateRegisterHandler interface for that can handle valid create register params
type CreateRegisterHandler interface {
	Handle(CreateRegisterParams) middleware.Responder
}

// NewCreateRegister creates a new http.Handler for the create register operation
func NewCreateRegister(ctx *middleware.Context, handler CreateRegisterHandler) *CreateRegister {
	return &CreateRegister{Context: ctx, Handler: handler}
}

/*CreateRegister swagger:route POST /register student createRegister

register student

create Register

*/
type CreateRegister struct {
	Context *middleware.Context
	Handler CreateRegisterHandler
}

func (o *CreateRegister) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateRegisterParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
